* Vladof [36/63] [57%]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:

#+BEGIN_QUOTE
You don't need to write a faster program.  You just need to run more cores.
#+END_QUOTE

Vladof is an attempt to make running embarassingly parallel code via
OpenCL as simple as writing procedural code.  The main goal is to make
it possible to write Monte-Carlo code for non-interacting particles
that runs in the GPU without writing any actual OpenCL code.

If this ever goes anywhere, I'll improve the documentation.  This code
is currently pre-alpha, so don't use it.

** TODO  Create OpenCL Code [31/48]

*** DONE Basic Binary operations

    I've implemented +,-,*,/, and %.  I may need to do something for
    integer division, but I'm not certain.

*** DONE Math Library Functions[28/42]

    I should provide overloaded versinos of the trig functions and
    other library functions.

**** DONE acos
**** DONE acosh
**** DONE sin
**** DONE sinh
**** DONE atan
**** TODO atan2
**** DONE tanh
**** DONE ceil
**** TODO copysign
**** DONE cos
**** DONE cosh
**** DONE degrees
**** TODO erf
**** TODO erfc
**** DONE exp
**** DONE expm1
**** DONE fabs
**** TODO factorial
**** DONE floor
**** TODO fmod
**** TODO frexp
**** TODO fsum
**** TODO gamma
**** TODO hypot
**** DONE isfinite
**** DONE isinf
**** DONE isnan
**** TODO ldexp
**** TODO lgamma
**** DONE log
**** DONE log10
**** DONE log1p
**** TODO modf
**** TODO pow
**** DONE radians
**** DONE sin
**** DONE sinh
**** DONE sqrt
**** DONE tan
**** DONE tanh
**** DONE trunc
*** TODO Other Binary Ops [/]

    I need to figure out a good way to represent the dot product and
    other binary functions.

**** DONE Power

**** TODO Dot Product


*** TODO Data Types
    Add type code into node objects to allow objects to carry the
    proper type information.  I'm currently asumingt that everything
    is float32, which is dumb.

** DONE Execture OpenCL Code [2/3]

*** DONE Develop Function Object

    The current plan is that, once the code has been run, it'll dump
    out a function object that can be executed on new data sets
    without requiring the OpenCL code to be rewritten or recompiled.
    I need to write the actual object for this.

*** DONE Export Function Object

    The Node generated by the user's code should generate a function
    object that can be used to repeatedly call the function with new
    data sets.


*** TODO Handle Size
    The kernel object should be smart enough to pull the size
    information from the parameters and make sure that the arrays
    match.
** TODO Setup Random Numbers [0/3]

*** TODO Implement Random Number Generator [0/2]

**** TODO Decide on Generator

     I need to decide what random number generator I'm using.  I need
     something that works well in parallel, so stanard algorithms like
     Mersenne Twister don't seem like the correct approach.

**** TODO Implement Generator

    Hopefully, I can find an existing implementation.  I'm not a random number expert. 


*** TODO Merge Random Numbers into Code

    I want to be able to treat random numbers as just another Node
    object.  However, I'm not sure hot to reconcile that with the rest
    of the code.  I have no idea what that's going to look like once
    it's written.

    This is why I don't have unit tests yet.
** TODO Write Documentation

   As pieces of the system get nailed down, I'll document the results.
   Currently, everything is very much in flux, so I'm just putting in
   comments for my own use.

** TODO Finish Unit Tests [3/4]

   I recognize the vast sin I've committed by not writing my tests
   before I wrote my program.  The fact is that I'm still in the
   exploraroty coding stage, so I'm not sure what the tests should
   even look like at this point.  I have a mental plan for the
   architecture, but, until I've tried it with actual code, I don't
   know if it will work, so I don't want to be limited to a bunch of
   tests that won't work in practice.

*** DONE Test Function Generation

*** DONE Test Function Execution

*** DONE Test Advanced Math

*** TODO Test Random Numbers
